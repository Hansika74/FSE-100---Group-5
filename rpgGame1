// Declare uncommon variable names for elements and state tracking
let questionText, optionsText, feedbackText, optionColors;
let selectedOption = null;
let feedbackDuration = 2000; // Feedback duration in milliseconds
let currentRound = 0;
let allowNextRound = false; // Tracks if the next round can start

// Game rounds data
const rounds = [
  {
    question: "Choose the most morally correct decision.\n\nYou see a little boy crying over a broken toy car. You have your grocery bags with candy, milk, and other items.\n\nWhat do you do?",
    options: [
      "Walk away",
      "Comfort the boy by giving him candy and help find his mother",
      "Yell at him to 'Shut up'",
      "EXIT"
    ],
    correctOption: 1
  },
  {
    question: "You find a wallet on the ground.\n\nWhat is the best action to take?",
    options: [
      "Take the money and throw the wallet away",
      "Turn it in to the nearest police station",
      "Keep it for yourself",
      "EXIT"
    ],
    correctOption: 1
  },
  {
    question: "You see an elderly person struggling to cross the road.\n\nWhat should you do?",
    options: [
      "Help them cross safely",
      "Ignore them and walk past",
      "Laugh and walk away",
      "EXIT"
    ],
    correctOption: 0
  },
  {
    question: "A classmate asks to copy your homework.\n\nWhat is the best response?",
    options: [
      "Give it to them so they stop bothering you",
      "Politely refuse and suggest helping them understand the material",
      "Tell them you lost your homework",
      "EXIT"
    ],
    correctOption: 1
  },
  {
    question: "You see someone drop a $20 bill without noticing.\n\nWhat would you do?",
    options: [
      "Take it for yourself",
      "Call out and return the money",
      "Leave it on the ground",
      "EXIT"
    ],
    correctOption: 1
  }
];

function setup() {
  createCanvas(800, 600);
  textAlign(CENTER, CENTER);
  feedbackText = "";
  optionColors = [color(255), color(255), color(255), color(255)];
}

function draw() {
  background(220);

  if (currentRound < rounds.length) {
    // Display question
    fill(0);
    textSize(18);
    text(rounds[currentRound].question, width / 2, 100);

    // Display options
    textSize(16);
    for (let i = 0; i < rounds[currentRound].options.length; i++) {
      fill(optionColors[i]);
      text(rounds[currentRound].options[i], width / 2, 200 + i * 50);
    }
  } else {
    // End of game message
    fill(0);
    textSize(24);
    text("Thank you for playing!", width / 2, height / 2);
    noLoop(); // Stop the loop
  }

  // Display feedback message
  if (feedbackText) {
    fill(0);
    text(feedbackText, width / 2, 450);
  }
}

function mousePressed() {
  if (currentRound < rounds.length && !allowNextRound) {
    // Determine which option was selected
    for (let i = 0; i < rounds[currentRound].options.length; i++) {
      if (mouseY > 190 + i * 50 && mouseY < 210 + i * 50) {
        selectedOption = i;
        checkAnswer();
        break;
      }
    }
  } else if (allowNextRound) {
    // Proceed to the next round if feedback was acknowledged
    resetOptionColors();
    feedbackText = "";
    selectedOption = null;
    allowNextRound = false;
    currentRound++;
  }
}

function checkAnswer() {
  resetOptionColors();

  if (selectedOption === rounds[currentRound].correctOption) { // Correct answer
    optionColors[selectedOption] = color(0, 255, 0); // Green for correct
    feedbackText = "Correct, great job!";
    allowNextRound = true;
  } else if (selectedOption === 3) { // EXIT option
    optionColors[selectedOption] = color(200); // Dimmed for exit
    feedbackText = "Exiting... Thank you for playing!";
    noLoop(); // Stop the loop immediately
  } else { // Incorrect answers
    optionColors[selectedOption] = color(255, 0, 0); // Red for incorrect
    feedbackText = "That's not quite right, try again!";
  }
}

function resetOptionColors() {
  for (let i = 0; i < optionColors.length; i++) {
    optionColors[i] = color(255);
  }
}
